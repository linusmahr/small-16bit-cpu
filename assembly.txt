asm.mv R1, #1
asm.mv R2, #23
asm.mv R3, #3
asm.mv R4, #4
asm.mv R5, #5
asm.mv R6, #6
asm.call @fibonacci

MVH IO, #0xFF
BA #0xF0

MVL R4, #-1
MVL R1, #5
MVL R2, #3
ADC R1, R2
asm.mv R3 #0x1234
MVL IO, #0x00
MVH IO, #0x40
SW R1, #0

MVL R2, #5
asm.mv R3, #5
asm.mv R4, #10

asm.call @multiply

MVL R8, #10

MVH IO, #0xFF
BA #0xF0

#asm.stop

# multiplier - multiplies R2 and R3 and puts result in R1
# R4 is used, but pushed and popped to stack. R1 is destroyed
@multiply
MVL R8, #5
PUSH R4
MV R4, R2
asm.mv R1, #0
SET R4         # begin loop
BO.NZ #4
POP R4
RET
ADC R1, R3     # what if carry is set in first iteration?
SUB R4, #1
BO #-14

# fibonacci - calculates the specified fibonacci number. sequence starts with 1, 2, ...
# result is put in R1, specified fibonacci number has to be put in R2
@fibonacci
PUSH R2
asm.mv R1, #1

# check if n is 1 or less; then fibonacci is 1
SUB R2, #1
SET R2
BO.P #4
POP R2
RET

# else compute fibonacci:
ADD R2, #1        # add back up from eval
PUSH R3           # store regs
PUSH R4
asm.mv R3, #0     # clear regs
asm.mv R4, #0
@fibonacci.loop
SUB R2, #1        # decrement n
MV R4, R1
ADD R4, R3        # add R3 and R1
MV R3, R1
MV R1, R4
SET R2            # evaluate
BO.P #-14
POP R4
POP R3
POP R2
RET
# BA @fibonaccy.loop      # another loop